{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "Simply place the the px-popover next to the element that you want it to attach to.\nSet the 'for' attribute to the 'id' of the element that it's associated with. Then set\nthe 'popover-title' and 'popover-body' properties, and/or set `enhanced` and pass HTML\ncontent as a child of the px-popover. The popover will automatically grow\nto encapsulate the contents that you have established.\n\nNOTE: Currently the popover must be a sibling of the associated trigger element, and both should\nbe contained within a 'static' positioned element such as a DIV. If in a relative positioned ancestor,\nwrap the trigger and popover in another relative positioned element and set the `position`\nproperty to `relative`. Absolute positioned parent elements are not supported.\n\n### Usage\n\n    <div id=\"someElement\">Some element</div>\n    <px-popover for=\"someElement\" orientation=\"bottom\" popover-title=\"Bottom Popover\" popover-body=\"Lorem ipsum\"></px-popover>\n\n    // If in a relative position ancestor:\n    <div style=\"position:relative;\">\n        <div id=\"someElement\">Some element</div>\n        <px-popover for=\"someElement\" position=\"relative\" popover-title=\"Bottom Popover\" popover-body=\"Lorem ipsum\"></px-popover>\n    </div>\n\n    // Passing rich HTML content:\n    <div id=\"someElement\">Some element</div>\n    <px-popover for=\"someElement\" orientation=\"bottom\" enhanced>\n      <form><label>This is a form<input class='text-input' type='text' value='Input'/></label></form>\n    </px-popover>\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n`--px-popover-background-color` | Background color for the popover\n`--px-popover-border-color` | Border color for the popover\n`--px-popover-text-color` | Color for the text\n`--px-popover-max-width` | Maximum width of the popover",
      "summary": "",
      "path": "px-popover.html",
      "properties": [
        {
          "name": "_parentResizable",
          "type": "Object",
          "description": "The closest ancestor element that implements `IronResizableBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_parentResizableChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyingDescendant",
          "type": "boolean",
          "description": "True if this element is currently notifying its descendant elements of\nresize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "for",
          "type": "string",
          "description": "The id of the element that the tooltip is anchored to. This element\nmust be a sibling of the tooltip.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 6
            },
            "end": {
              "line": 89,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_forChanged\""
            }
          }
        },
        {
          "name": "orientation",
          "type": "string",
          "description": "The direction that the popover is displayed relative to the\n'for' element.\n- 'left' to the left of the 'for' element\n- 'right' to the right of the 'for' element\n- 'top' above the 'for' element\n- 'bottom' below the 'for' element",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 6
            },
            "end": {
              "line": 102,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"right\""
        },
        {
          "name": "popoverTitle",
          "type": "string",
          "description": "The title that will be displayed in the popover.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 6
            },
            "end": {
              "line": 110,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        },
        {
          "name": "popoverBody",
          "type": "string",
          "description": "The body text that will be displayed in the popover. Note: Does not support HTML elements within the body. Set `enhanced` and pass HTML as a child of the px-popover instead.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        },
        {
          "name": "position",
          "type": "string",
          "description": "If the target/popover are descendent of a relative position element, wrap the target and popover in another element with relative positioning and set this flag to \"relative\"",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 6
            },
            "end": {
              "line": 125,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"absolute\""
        },
        {
          "name": "hideOverlay",
          "type": "boolean",
          "description": "By default, the overlay covering the rest of the screen is off.\nThis property should be set to false for mobile applications.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 6
            },
            "end": {
              "line": 134,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"hideOverlayChanged\""
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "enhanced",
          "type": "boolean",
          "description": "Enhanced empowers the developer to fully control the inner HTML of the popover. For instance, the popover can be used to render a form or contain an embedded video.\nTo inject your custom HTML, simply include your custom markup as the first child of the px-popover when declaring the px-popover in your application. Sample provided below.\n\n    <px-popover for=\"someElement\" enhanced>\n        <form>\n           <label>This is a form\n             <input type='text'/>\n           </label>\n        </form>\n    </px-popover>",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 150,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_isShowing",
          "type": "boolean",
          "description": "Whether the popover is currently shown.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 6
            },
            "end": {
              "line": 157,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "attached",
          "description": "Sets up listeners when popover is created",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 4
            },
            "end": {
              "line": 210,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "Removes listeners when popover is destroyed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 4
            },
            "end": {
              "line": 220,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "notifyResize",
          "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "assignParentResizable",
          "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "stopResizeNotificationsFor",
          "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "resizerShouldNotify",
          "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 59
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the `element` should be notified of resize."
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onDescendantIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_fireResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronRequestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_parentResizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descendant"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_requestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_getTarget",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_forChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 4
            },
            "end": {
              "line": 197,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 4
            },
            "end": {
              "line": 225,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_isDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 235,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parent"
            },
            {
              "name": "child"
            }
          ]
        },
        {
          "name": "_toggle",
          "description": "Determines if event should yield a change in the popover visibility and sets up vars associated with the type of show event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 239,
              "column": 4
            },
            "end": {
              "line": 262,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "show",
          "description": "Displays the popover",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 266,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "hide",
          "description": "Hides the popover",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 4
            },
            "end": {
              "line": 287,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setPosition",
          "description": "Calculates which direction the popover should go and creates vars used in positioning the popover",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_positionTop",
          "description": "Sets the left and top style attrs to position the popover. Using right or bottom attrs yields changing vars and are thus unreliable.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 324,
              "column": 4
            },
            "end": {
              "line": 341,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_positionBottom",
          "description": "Sets the left and top style attrs to position the popover. Using right or bottom attrs yields changing vars and are thus unreliable.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 345,
              "column": 4
            },
            "end": {
              "line": 362,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_positionLeft",
          "description": "Sets the left and top style attrs to position the popover. Using right or bottom attrs yields changing vars and are thus unreliable.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 366,
              "column": 4
            },
            "end": {
              "line": 384,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_positionRight",
          "description": "Sets the left and top style attrs to position the popover. Using right or bottom attrs yields changing vars and are thus unreliable.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 388,
              "column": 4
            },
            "end": {
              "line": 405,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "inRelativeElement",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 406,
              "column": 4
            },
            "end": {
              "line": 413,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "hideOverlayChanged",
          "description": "Adds and removes event listeners if the `hide-overlay` property is changed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 417,
              "column": 4
            },
            "end": {
              "line": 426,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hideOverlay"
            }
          ]
        },
        {
          "name": "_onCaptureClick",
          "description": "Called whenever a click happens if the overlay is hidden.\nIf the overlay is open and the click came from outside of\nthe popover, we hide it.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 432,
              "column": 4
            },
            "end": {
              "line": 449,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 74,
          "column": 10
        },
        "end": {
          "line": 450,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "for",
          "description": "The id of the element that the tooltip is anchored to. This element\nmust be a sibling of the tooltip.",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 6
            },
            "end": {
              "line": 89,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "orientation",
          "description": "The direction that the popover is displayed relative to the\n'for' element.\n- 'left' to the left of the 'for' element\n- 'right' to the right of the 'for' element\n- 'top' above the 'for' element\n- 'bottom' below the 'for' element",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 6
            },
            "end": {
              "line": 102,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "popover-title",
          "description": "The title that will be displayed in the popover.",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 6
            },
            "end": {
              "line": 110,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "popover-body",
          "description": "The body text that will be displayed in the popover. Note: Does not support HTML elements within the body. Set `enhanced` and pass HTML as a child of the px-popover instead.",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "position",
          "description": "If the target/popover are descendent of a relative position element, wrap the target and popover in another element with relative positioning and set this flag to \"relative\"",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 6
            },
            "end": {
              "line": 125,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "hide-overlay",
          "description": "By default, the overlay covering the rest of the screen is off.\nThis property should be set to false for mobile applications.",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 6
            },
            "end": {
              "line": 134,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "enhanced",
          "description": "Enhanced empowers the developer to fully control the inner HTML of the popover. For instance, the popover can be used to render a form or contain an embedded video.\nTo inject your custom HTML, simply include your custom markup as the first child of the px-popover when declaring the px-popover in your application. Sample provided below.\n\n    <px-popover for=\"someElement\" enhanced>\n        <form>\n           <label>This is a form\n             <input type='text'/>\n           </label>\n        </form>\n    </px-popover>",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 150,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-popover"
    }
  ]
}
